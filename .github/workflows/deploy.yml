name: Deploy

on:
  push:
    branches: [dev, stg, prd]
env:
  node_version: "18.x"
  tf_version: "1.3.7" # must match value in iac/*/*/*.tf
  FORCE_COLOR: 3

concurrency: ${{ github.ref }}
jobs:
  env:
    name: Set Env Vars
    runs-on: ubuntu-latest
    steps:
      - name: Set up DEV Environment Variables
        if: github.ref == 'refs/heads/dev'
        run: |
          matrix='{
            "env":[
              {
                "environment_name":"dev",
                "ecr_repo_name":"training-fav-color-app-dev",
                "tf_working_dir":"./iac/dev/app",
                "aws_account":"863362256468",
                "aws_gha_role":"training-fav-color-app-dev-gha",
                "rfc_key_name":"standard_change_sandbox_client_key",
                "rfc_secret_name":"standard_change_sandbox_client_secret",
                "rfc_template_id":"Codepipeline-Standard-Change"
              }
            ]
          }'
          echo matrix=`echo $matrix | jq -c .` >> $GITHUB_ENV

    outputs:
      matrix: ${{ env.matrix }}

  build_and_deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: env
    strategy:
      matrix: ${{ fromJson(needs.env.outputs.matrix) }}
      fail-fast: false
    environment:
      name: ${{ matrix.env.environment_name }}
      url: https://${{ steps.terraform-outputs.outputs.url }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node_version }}
          cache: npm
          cache-dependency-path: '**/package-lock.json'

      - name: Audit
        working-directory: app
        run: npm audit --audit-level=critical

      - name: Build
        working-directory: app
        run: npm ci --prefer-offline

      - name: Lint
        working-directory: app
        run: npm run lint

      - name: Test
        working-directory: app
        run: npm test

      - name: Report test coverage to Codecov
        uses: codecov/codecov-action@v3
        if: env.CODECOV_TOKEN
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::${{ matrix.env.aws_account }}:role/${{ matrix.env.aws_gha_role }}"
          role-session-name: ${{ github.sha }}
          aws-region: us-west-2

      - name: Log into Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get Current Timestamp
        id: date
        run: echo "timestamp=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_OUTPUT

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push the Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPO: ${{ matrix.env.ecr_repo_name }}
          IMAGE_TAG: ${{ steps.date.outputs.timestamp }}
        uses: docker/build-push-action@v5
        with:
          context: app
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO}}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.tf_version }}
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ${{ matrix.env.tf_working_dir }}
        run: terraform init

      - name: Terraform Format
        working-directory: "./"
        run: terraform fmt -check -diff -recursive

      - name: Terraform Plan
        working-directory: ${{ matrix.env.tf_working_dir }}
        run: terraform plan -var 'image_tag=${{ steps.date.outputs.timestamp }}' -input=false -out=plan

      - name: Analyze Terraform Plan
        uses: byu-oit/github-action-tf-plan-analyzer@v2
        with:
          working-directory: ${{ matrix.env.tf_working_dir }}
          terraform-plan-file: plan
          divvycloud-username: ${{ secrets.DIVVYCLOUD_USERNAME }}
          divvycloud-password: ${{ secrets.DIVVYCLOUD_PASSWORD }}

      - name: Start Standard Change
        uses: byu-oit/github-action-start-standard-change@v1
        id: start-standard-change
        with:
          client-key: ${{ secrets[matrix.env.rfc_key_name] }}
          client-secret: ${{ secrets[matrix.env.rfc_secret_name] }}
          template-id: ${{ matrix.env.rfc_template_id }}

      - name: Terraform Apply
        working-directory: ${{ matrix.env.tf_working_dir }}
        run: terraform apply plan

      - name: Get Terraform Outputs
        id: terraform-outputs
        working-directory: ${{ matrix.env.tf_working_dir }}
        run: |
          echo "codedeploy_app_name=$(terraform output -raw codedeploy_app_name)" >> $GITHUB_OUTPUT
          echo "codedeploy_deployment_group_name=$(terraform output -raw codedeploy_deployment_group_name)" >> $GITHUB_OUTPUT
          echo "codedeploy_appspec_json_file=$(terraform output -raw codedeploy_appspec_json_file)" >> $GITHUB_OUTPUT
          echo "url=$(terraform output -raw url)" >> $GITHUB_OUTPUT

      - name: CodeDeploy
        id: deploy
        uses: byu-oit/github-action-codedeploy@v2
        with:
          application-name: ${{ steps.terraform-outputs.outputs.codedeploy_app_name }}
          deployment-group-name: ${{ steps.terraform-outputs.outputs.codedeploy_deployment_group_name }}
          appspec-file: ${{ steps.terraform-outputs.outputs.codedeploy_appspec_json_file }}

      - name: End Standard Change
        uses: byu-oit/github-action-end-standard-change@v1
        if: always() && steps.start-standard-change.outcome == 'success' # Run if RFC started, even if the deploy failed
        with:
          client-key: ${{ secrets[matrix.env.rfc_key_name] }}
          client-secret: ${{ secrets[matrix.env.rfc_secret_name] }}
          change-sys-id: ${{ steps.start-standard-change.outputs.change-sys-id }}
          work-start: ${{ steps.start-standard-change.outputs.work-start }}
          success: ${{ job.status == 'success' }}

#       TODO uncomment after adding MS_TEAMS_WEBHOOK_URL to your GitHub actions secrets
#      - name: Teams Notification
#        uses: byu-oit/github-action-teams@v3
#        if: always()
#        with:
#          status: ${{ job.status }}
#          webhook-url: ${{ secrets.MS_TEAMS_WEBHOOK_URL }}
